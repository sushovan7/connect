

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @default(autoincrement()) @id
  email String @unique @db.VarChar(255)
  username String @unique @db.VarChar(100)
  password String @db.VarChar(100) 
  clerkId String @unique
  name String? @db.VarChar(100)
  bio String? @db.VarChar(500)
  location String?
  website String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

// relations
posts Post[]
comments Comment[]
Likes Like[]
followers Follows[] @relation("following")//users who follows this user 
following Follows[] @relation("follower")//users this user follows
notifications Notification[] @relation("userNotifications")//notification receive by the user
notificationCreated Notification[] @relation("notificationCreator")//notifications triggered by a user
}



model Post{
id Int @default(autoincrement()) @id
  authorId Int
  content String?
  image String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade) // cascade delete means delete all posts if author is deleted
  comments Comment[]
  likes Like[]
  notifications Notification[] 
}



model Comment{
 id Int @default(autoincrement()) @id
  content String
  authorId Int
  postId Int
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // composite index for faster queries
}



model Like {
  id Int @default(autoincrement()) @id
  postId    Int                
  userId    Int                
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // this prevents same user liking post twice
}



model Follows{
  followerId Int
  followingId Int
  createdAt DateTime @default(now())

  // Relations
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
}



model Notification {
id Int @default(autoincrement()) @id
  userId    Int                 
  creatorId Int                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    Int?                 
  commentId Int?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}



enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}